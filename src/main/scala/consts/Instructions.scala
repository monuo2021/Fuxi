// 该文件定义指令信息
package consts

import chisel3._
import chisel3.util.BitPat

object Instructions {
  // arithmetic，算术指令
  val ADD       = BitPat("b0000000??????????000?????0110011")
  val ADDI      = BitPat("b?????????????????000?????0010011")
  val SUB       = BitPat("b0100000??????????000?????0110011")
  val LUI       = BitPat("b?????????????????????????0110111")
  val AUIPC     = BitPat("b?????????????????????????0010111")

  // logical，逻辑指令
  val XOR       = BitPat("b0000000??????????100?????0110011")
  val XORI      = BitPat("b?????????????????100?????0010011")
  val OR        = BitPat("b0000000??????????110?????0110011")
  val ORI       = BitPat("b?????????????????110?????0010011")
  val AND       = BitPat("b0000000??????????111?????0110011")
  val ANDI      = BitPat("b?????????????????111?????0010011")

  // compare，比较置位指令
  val SLT       = BitPat("b0000000??????????010?????0110011")
  val SLTI      = BitPat("b?????????????????010?????0010011")
  val SLTU      = BitPat("b0000000??????????011?????0110011")
  val SLTIU     = BitPat("b?????????????????011?????0010011")

  // shift，移位指令
  val SLL       = BitPat("b0000000??????????001?????0110011")
  val SLLI      = BitPat("b0000000??????????001?????0010011")
  val SRL       = BitPat("b0000000??????????101?????0110011")
  val SRLI      = BitPat("b0000000??????????101?????0010011")
  val SRA       = BitPat("b0100000??????????101?????0110011")
  val SRAI      = BitPat("b0100000??????????101?????0010011")

  // branch & jump，分支跳转/跳转指令
  val BEQ       = BitPat("b?????????????????000?????1100011")
  val BNE       = BitPat("b?????????????????001?????1100011")
  val BLT       = BitPat("b?????????????????100?????1100011")
  val BGE       = BitPat("b?????????????????101?????1100011")
  val BLTU      = BitPat("b?????????????????110?????1100011")
  val BGEU      = BitPat("b?????????????????111?????1100011")
  val JAL       = BitPat("b?????????????????????????1101111")
  val JALR      = BitPat("b?????????????????000?????1100111")

  // load & store，加载存数指令
  val LB        = BitPat("b?????????????????000?????0000011")
  val LH        = BitPat("b?????????????????001?????0000011")
  val LW        = BitPat("b?????????????????010?????0000011")
  val LBU       = BitPat("b?????????????????100?????0000011")
  val LHU       = BitPat("b?????????????????101?????0000011")
  val SB        = BitPat("b?????????????????000?????0100011")
  val SH        = BitPat("b?????????????????001?????0100011")
  val SW        = BitPat("b?????????????????010?????0100011")

  // sync，同步指令
  val FENCE     = BitPat("b0000????????00000000000000001111")
  val FENCEI    = BitPat("b00000000000000000001000000001111")

  // CSR access，CSR（控制与状态寄存器）相关指令
  val CSRRW     = BitPat("b?????????????????001?????1110011")
  val CSRRS     = BitPat("b?????????????????010?????1110011")
  val CSRRC     = BitPat("b?????????????????011?????1110011")
  val CSRRWI    = BitPat("b?????????????????101?????1110011")
  val CSRRSI    = BitPat("b?????????????????110?????1110011")
  val CSRRCI    = BitPat("b?????????????????111?????1110011")

  // multiplication & division，乘除指令
  val MUL       = BitPat("b0000001??????????000?????0110011")
  val MULH      = BitPat("b0000001??????????001?????0110011")
  val MULHSU    = BitPat("b0000001??????????010?????0110011")
  val MULHU     = BitPat("b0000001??????????011?????0110011")
  val DIV       = BitPat("b0000001??????????100?????0110011")
  val DIVU      = BitPat("b0000001??????????101?????0110011")
  val REM       = BitPat("b0000001??????????110?????0110011")
  val REMU      = BitPat("b0000001??????????111?????0110011")

  // atomic，原子指令
  val LRW       = BitPat("b00010??00000?????010?????0101111")
  val SCW       = BitPat("b00011????????????010?????0101111")
  val AMOSWAPW  = BitPat("b00001????????????010?????0101111")
  val AMOADDW   = BitPat("b00000????????????010?????0101111")
  val AMOXORW   = BitPat("b00100????????????010?????0101111")
  val AMOANDW   = BitPat("b01100????????????010?????0101111")
  val AMOORW    = BitPat("b01000????????????010?????0101111")
  val AMOMINW   = BitPat("b10000????????????010?????0101111")
  val AMOMAXW   = BitPat("b10100????????????010?????0101111")
  val AMOMINUW  = BitPat("b11000????????????010?????0101111")
  val AMOMAXUW  = BitPat("b11100????????????010?????0101111")

  // privilege，特权级指令
  val ECALL     = BitPat("b00000000000000000000000001110011")   // 环境调用
  val EBREAK    = BitPat("b00000000000100000000000001110011")   // 环境断点
  val SRET      = BitPat("b00010000001000000000000001110011")   // 管理者/监督者模式异常调用
  val MRET      = BitPat("b00110000001000000000000001110011")   // 机器模式异常调用
  val WFI       = BitPat("b00010000010100000000000001110011")   // 等待中断
  val SFENCEVMA = BitPat("b0001001??????????000000001110011")   // 虚拟内存屏障

  // pseudo instruction
  val NOP       = "b00000000000000000000000000010011".U(32.W)
}
